/-
func Foo x int, y float (int):
   var a int: 5
   var b float: 5
   |int (+ a b)|
end
-/

/-
; We use this to print out the argument, since the compiler does it 
; automatically at the end of each function call.
func id x int (int):
   x
end

func idf x float (float):
   x
end

func testTrivial (int):
   (+ 10 20)
end

func testVars (int):
   var x int: 15
   var y int: 25
   (- x y)
end

func testArgs x int, y int (int):
   (* x y)
end

func testArgsAndVars x int (int):
   var y int: 2
   (/ x y)
end

func testLogic (int):
   ;(not 0)
   (= 10 10 10)
end

func float2int f float (int):
   |int f|
end

func floatMath f float, g float (float):
   (- 3. (+ f (* g (/ 1. 2.))))
end

; Implicit coercion, yay?
func int2float i int (float):
   i           ;|float i|
end

func loopTest i int (float):
   var j int: i
   var m float: 0
   while (< j (* i 2)) do
      j: (+ j 1)
      m: (+ m 1)
   end
   m
end

func floatComp (float):
   var f float: (* 10.0 1.5)
   var i int: 0
   while (< f 100.) do
      f: (* f 1.5)
      i: (+ i 1)
   end
   f
   ;(>= 19 (floatMath 5 50))
end
-/

func notTest (int):
   1
   (not 1)
end

func main (int):
/-
   (testTrivial)
   (id 30)

   (testVars)
   (id -10)

   (testArgs 5 10)
   (id 50)

   (testArgsAndVars 10)
   (id 5)

   (testLogic)
   (id 1)

   (float2int 10.5)
   (id 10)

   (int2float 20)
   (idf 20)

   (floatMath 5 50)
   (idf -27.0)

   (loopTest 10)
   (idf 10)
   
   (floatComp)
   (idf 113.90625)
   -/

   (notTest)

   0
end
